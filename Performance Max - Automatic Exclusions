// Automatic Exclusions ChatGPT-v1 
// Dit script maakt een connectie met de API van ChatGPT. Vervolgens kan je het op basis van gegeven prompts automatisch zoektermen laten uitsluiten als exact in een uitsluitingszoekwoordenlijst. 
// Een vereiste voor het gebruik van dit script is dat je een API key hebt om de connectie te maken met de API van ChatGPT, anders zal dit script niet werken.

//-------------- Pas de variabelen hieronder aan--------------

  const CHAT_GPT_API_KEY = ''; // Vul hier de API key in.
  const bedrijfsnaam = 'BEDRIJFSNAAM'; // Vul hier de bedrijfsnaam in.
  const beschrijvingBedrijf = 'BESCHRIJVINGBEDRIJF' // Vul hier een beschrijving van het bedrijf in, zoveel mogelijk in de buurt van de strategie om te adverteren in dit account. De korter de beter!
  const negativeKeywordListName = 'NEGATIVEKEYWORDLISTNAME'; // Vul hier de uitsluitingszoekwoordenlijst in.
  const campagneNaam = 'NB' // Vul hierin welke tekst een campagne moet bevatten.
  const recipientEmail = 'MAILADRES'; // Vul hier het e-mailadres. Gebruik een , bij meerdere e-mailadressen.
  const periode = 'LAST_7_DAYS' // Vul hierin welke periode de zoektermen moeten worden opgehaald. Mogelijke periodes: TODAY, YESTERDAY, LAST_7_DAYS, THIS_WEEK_SUN_TODAY, LAST_WEEK, LAST_14_DAYS, LAST_30_DAYS, LAST_BUSINESS_WEEK, LAST_WEEK_SUN_SAT, THIS_MONTH, LAST_MONTH, ALL_TIME, - YYYYMMDD”, “YYYYMMDD
  const minImpressions = 1 // Vul hier het minimale aantal vertoningen in dat een zoektermen moet hebben om gecontroleerd te worden.

//---------------Verander niks onder deze lijn-----------------

  const ENDPOINT_URL = 'https://api.openai.com/v1/chat/completions';

function getGPTResponse(systemPrompt, userPrompt) {
  
  try {
    const messages= [
      {"role": "system", "content": systemPrompt},
      {"role": "user", "content": userPrompt}
    ];

    const headers = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${CHAT_GPT_API_KEY}`
    };

    const payload = {
      "model": 'gpt-3.5-turbo',
      "messages": messages,
      "max_tokens": 1,
      "temperature": 0,
    };

    const httpOptions = {
      "method" : "POST",
      "muteHttpExceptions": true,
      "headers" : headers,
      'payload': JSON.stringify(payload)
    };
    
    const response = JSON.parse(UrlFetchApp.fetch(ENDPOINT_URL, httpOptions));
  
    const responseContent = response.choices[0].message.content;
    //console.log("responseContent = "+responseContent);
    
    return responseContent;
  } catch (e) {
    console.log("### ERROR: some error occured. Please check and try again.\n "+e);
  }
}
  
function main() {
  var searchtermArray = []; // Voeg de headerrij toe
  
  var query = "SELECT Query " +
    "FROM SEARCH_QUERY_PERFORMANCE_REPORT " +
    "WHERE " +
      `CampaignName CONTAINS ${campagneNaam} ` +
      " AND QueryTargetingStatus = 'NONE' " +
      " AND Impressions >= " + minImpressions +
    `DURING ${periode}`;
  
  var report = AdsApp.report(query);
  var rows = report.rows();
  
  while (rows.hasNext()) {
    var row = rows.next();
    var searchTerm = row['Query'];
    searchtermArray.push(searchTerm);
  }
  
  Logger.log(searchtermArray);
  
  var exclusions = [];
  
  var maxExecutionTime = 1500000; // 25 minuten
  var startTime = new Date().getTime();

  for (var i = 0; i < searchtermArray.length; i++) {
    // Controleer of de maximale uitvoeringstijd is overschreden.
    var elapsedTime = new Date().getTime() - startTime;
    if (elapsedTime >= maxExecutionTime) {
      Logger.log("Het script is gestopt vanwege het bereiken van de maximale uitvoeringstijd.");
      break; // Verlaat de loop als de tijd is overschreden
    }
    var zoekterm = searchtermArray[i];
    var systemPrompt = `Geef aan op een schaal van 1 t/m 10 of onderstaande zoekterm relevant is voor het bedrijf ${bedrijfsnaam} met als beschrijving ${beschrijvingBedrijf}. Geef alleen een cijfer als antwoord.`;
    var userPrompt = `De zoekterm is ${zoekterm}`;
    var gptResponse = getGPTResponse(systemPrompt, userPrompt);
    var exactQuery = "[" + zoekterm + "]";

    // Controleer of de gptResponse gelijk is aan "1" (string omdat GPT meestal tekst retourneert)
    if (gptResponse === "1") {
      exclusions.push(exactQuery);
    }
  }
  
  Logger.log(exclusions);
  
  var newArray = [];
  var excludedTermsFound = false;
  
  for (var i = 0; i < exclusions.length; i++) {
    var negativeKeyword = exclusions[i];
    newArray.push(negativeKeyword.toString());
  
    var negativeKeywordListIterator = AdsApp.negativeKeywordLists().withCondition("Name = '" + negativeKeywordListName + "'").get();
    if (negativeKeywordListIterator.hasNext()) {
      var negativeKeywordList = negativeKeywordListIterator.next();
      negativeKeywordList.addNegativeKeyword(negativeKeyword);
    } else {
      Logger.log("Negative keyword list '" + negativeKeywordListName + "' not found.");
    }
  }
  
  if (excludedTermsFound) {
    Logger.log("Empty value(s) found, excluding terms.");
  }
  
  if (newArray.length > 0) {
    Logger.log("Negative keywords added to list: " + negativeKeywordListName);
  
    // Send email with excluded search terms
    var accountName = AdsApp.currentAccount().getName();
    var emailSubject = `IMPORTANT | ${accountName} - Excluded Search Terms Report`;
    var emailBody = 'Bekijk hieronder de uitgesloten zoektermen als exact. \n \n' + newArray.join('\n');
  
    MailApp.sendEmail({
      to: recipientEmail,
      subject: emailSubject,
      body: emailBody
    });
  
    Logger.log("Email sent with excluded search terms.");
  } else {
    Logger.log("No negative keywords to add.");
  }
}
